<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="T_SubModuleCollection" Id="{e452d146-811c-4c16-9bd5-d9b031d0f126}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK T_SubModuleCollection EXTENDS T_NamedBase IMPLEMENTS I_SubModuleCollection
VAR
	baseCollection : T_CollectionBase;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Private" Id="{d106ef2b-c9fc-4851-bf38-29babcd29720}" />
    <Method Name="AddModule" Id="{53fec14b-7f0d-4c8d-b489-4f8a2e7a91db}">
      <Declaration><![CDATA[METHOD PUBLIC AddModule : BOOL
VAR_INPUT
  newModule : I_PackML_BaseModule;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF newModule = 0 THEN
	LogError( 'Cannot AddModule invalid ref' );
	RETURN;
END_IF

AddModule := baseCollection.AddItem( newItem := CastToBase(newModule) );]]></ST>
      </Implementation>
    </Method>
    <Method Name="AllInRequestedState" Id="{c5525ce9-7897-4cf9-8030-5bde5f91a91f}">
      <Declaration><![CDATA[METHOD PUBLIC AllInRequestedState : BOOL
VAR_INPUT
	State : Tc3_PackML_V2.E_PMLState;
END_VAR
VAR
	i : UDINT;
	Module : I_PackML_BaseModule;
END_VAR ]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Count = 0 THEN
	AllInRequestedState := TRUE;
	RETURN;
END_IF

WHILE i < Count 
		AND_THEN TryGetModule(i, Module => Module) DO
		
    IF Module.CurrentState <> State THEN
		RETURN;
	END_IF
	
    i := i + 1;
END_WHILE

AllInRequestedState := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="AnyError" Id="{eb31021d-4235-42c3-9509-05306c59aad0}">
      <Declaration><![CDATA[PROPERTY AnyError : BOOL]]></Declaration>
      <Get Name="Get" Id="{5c9aadd3-4bed-46fd-99cb-3ec8209718e2}">
        <Declaration><![CDATA[VAR
  i : UDINT;
  Module : I_PackML_BaseModule;
 END_VAR ]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF Count = 0 THEN
    RETURN;
END_IF

FOR i := 0 TO Count - 1 DO

    IF NOT TryGetModule(i, Module => Module) THEN
        RETURN;
    END_IF
		
	IF Module.Error THEN
		AnyError := TRUE;
		RETURN;
	END_IF

END_FOR
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="AnyInRequestedState" Id="{fd7aede1-97d0-4952-ae9a-bdb82589f7f4}">
      <Declaration><![CDATA[METHOD PUBLIC AnyInRequestedState : BOOL
VAR_INPUT
	State : Tc3_PackML_V2.E_PMLState;
END_VAR
VAR_OUTPUT
	Module : I_PackML_BaseModule;	
END_VAR
VAR
	i : UDINT;
END_VAR ]]></Declaration>
      <Implementation>
        <ST><![CDATA[WHILE i < Count 
		AND_THEN TryGetModule(i, Module => Module) DO
		
    IF Module.CurrentState = State THEN
		AnyInRequestedState := TRUE;
		RETURN;
	END_IF
	
    i := i + 1;
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="CastToBase" Id="{e6ccd76b-eaf5-4d64-a44c-51d4496fb87b}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE CastToBase : I_InterfaceBase
VAR_INPUT
	Module : I_PackML_BaseModule;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[__QUERYINTERFACE(Module, CastToBase);]]></ST>
      </Implementation>
    </Method>
    <Method Name="CastToType" Id="{717d3acf-d995-45d1-8abb-14e4afe5466d}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE CastToType : I_PackML_BaseModule
VAR_INPUT
	Base : I_InterfaceBase;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[__QUERYINTERFACE(Base, CastToType);]]></ST>
      </Implementation>
    </Method>
    <Method Name="ClearGroup" Id="{cb9d1629-e01b-4707-930b-6f8590c32fe3}">
      <Declaration><![CDATA[METHOD PUBLIC ClearGroup // clears the group down]]></Declaration>
      <Implementation>
        <ST><![CDATA[baseCollection.ClearGroup();]]></ST>
      </Implementation>
    </Method>
    <Property Name="Count" Id="{131a2ff4-da96-47d5-bf78-152c7d900b2a}">
      <Declaration><![CDATA[PROPERTY Count : UDINT]]></Declaration>
      <Get Name="Get" Id="{0e4e52a9-02de-4758-990e-85fbb1dce94b}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Count := baseCollection.Count;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="CyclicLogic" Id="{14da67f3-5fa4-4574-9988-115d51302eb8}">
      <Declaration><![CDATA[METHOD CyclicLogic
VAR
  i : UDINT;
  Module : I_PackML_BaseModule;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[WHILE i < Count 
		AND_THEN TryGetModule(i, Module => Module) DO
		
    Module.CyclicLogic();
    i := i + 1;
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Property Name="InitialisedAll" Id="{cb8be73b-6402-458a-bffd-aa60da85ce4b}">
      <Declaration><![CDATA[PROPERTY PUBLIC InitialisedAll : BOOL
]]></Declaration>
      <Get Name="Get" Id="{5fb1c1d1-cf1d-4536-8532-22fb2763eeb1}">
        <Declaration><![CDATA[VAR
  i : UDINT;
  Module : I_PackML_BaseModule;
 END_VAR ]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF Count = 0 THEN
	InitialisedAll := TRUE;
  RETURN;
END_IF

WHILE i < Count 
		AND_THEN TryGetModule(i, Module => Module) DO
		
	IF NOT Module.InitComplete THEN
		RETURN;
	END_IF
    i := i + 1;
END_WHILE

InitialisedAll := TRUE;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="NotifyModeChanged" Id="{4b757abb-b5fa-4f69-8c19-ba1cf5b656bd}">
      <Declaration><![CDATA[METHOD PUBLIC NotifyModeChanged
VAR_INPUT
    Mode : E_PMLUnitMode;
END_VAR
VAR
	i : UDINT;
	Module : I_PackML_BaseModule;
END_VAR ]]></Declaration>
      <Implementation>
        <ST><![CDATA[WHILE i < Count 
		AND_THEN TryGetModule(i, Module => Module) DO
		
	Module.ChangeMode(Mode);
    i := i + 1;
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="NotifyStateChanged" Id="{4a22e1ac-0e21-4315-95e2-0fceb8c44e5e}">
      <Declaration><![CDATA[METHOD PUBLIC NotifyStateChanged
VAR_INPUT
	CommandedState : Tc3_PackML_V2.E_PMLCommand;
END_VAR
VAR
	i : UDINT;
	Module : I_PackML_BaseModule;
END_VAR ]]></Declaration>
      <Implementation>
        <ST><![CDATA[WHILE i < Count 
		AND_THEN TryGetModule(i, Module => Module) DO
		
	Module.ChangeState(CommandedState);
    i := i + 1;
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="StateReset" Id="{f3e56b8e-4e67-469f-b002-8fff282ece26}">
      <Declaration><![CDATA[METHOD PUBLIC StateReset
VAR
	i : UDINT;
	Module : I_PackML_BaseModule;
END_VAR ]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Count = 0 THEN
	RETURN;
END_IF


WHILE i < Count 
		AND_THEN TryGetModule(i, Module => Module) DO
	
	IF Module.CurrentState = ePMLState_Stopped OR Module.CurrentState = ePMLState_Complete THEN
		Module.ChangeState (ePMLCommand_Reset);
	ELSIF Module.CurrentState = ePMLState_Aborted THEN
		Module.ChangeState (ePMLCommand_Clear);
	ELSIF Module.CurrentState = ePMLState_Clearing OR Module.CurrentState = ePMLState_Stopping OR Module.CurrentState = ePMLState_Resetting OR
		 Module.CurrentState = ePMLState_Idle THEN
		;
	ELSE
		Module.ChangeState(ePMLCommand_Abort);
	END_IF
		
	
    i := i + 1;
	
END_WHILE

]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetModule" Id="{6a10edd7-8fc0-4b22-9321-1adf10171732}">
      <Declaration><![CDATA[METHOD TryGetModule: BOOL
VAR_INPUT
	index : UDINT;
END_VAR
VAR_OUTPUT
	Module : I_PackML_BaseModule;
END_VAR
VAR
	baseItem : I_InterfaceBase;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[baseCollection.TryGetItem(index, item => baseItem);
Module := CastToType(baseItem);

IF Module = 0 THEN
	LogError( 'Cannot TryGetModule  Module = 0' );
	RETURN;
END_IF 

TryGetModule := Module <> 0;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="T_SubModuleCollection">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="T_SubModuleCollection.AddModule">
      <LineId Id="3" Count="3" />
      <LineId Id="12" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="T_SubModuleCollection.AllInRequestedState">
      <LineId Id="110" Count="14" />
      <LineId Id="33" Count="0" />
    </LineIds>
    <LineIds Name="T_SubModuleCollection.AnyError.Get">
      <LineId Id="29" Count="1" />
      <LineId Id="7" Count="1" />
      <LineId Id="31" Count="3" />
      <LineId Id="13" Count="0" />
      <LineId Id="18" Count="6" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="T_SubModuleCollection.AnyInRequestedState">
      <LineId Id="119" Count="8" />
      <LineId Id="88" Count="0" />
    </LineIds>
    <LineIds Name="T_SubModuleCollection.CastToBase">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="T_SubModuleCollection.CastToType">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="T_SubModuleCollection.ClearGroup">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="T_SubModuleCollection.Count.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="T_SubModuleCollection.CyclicLogic">
      <LineId Id="42" Count="3" />
      <LineId Id="50" Count="0" />
      <LineId Id="40" Count="0" />
    </LineIds>
    <LineIds Name="T_SubModuleCollection.InitialisedAll.Get">
      <LineId Id="5" Count="3" />
      <LineId Id="37" Count="0" />
      <LineId Id="39" Count="2" />
      <LineId Id="44" Count="1" />
      <LineId Id="42" Count="1" />
      <LineId Id="38" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="T_SubModuleCollection.NotifyModeChanged">
      <LineId Id="49" Count="4" />
      <LineId Id="48" Count="0" />
    </LineIds>
    <LineIds Name="T_SubModuleCollection.NotifyStateChanged">
      <LineId Id="46" Count="4" />
      <LineId Id="34" Count="0" />
    </LineIds>
    <LineIds Name="T_SubModuleCollection.StateReset">
      <LineId Id="53" Count="2" />
      <LineId Id="65" Count="0" />
      <LineId Id="67" Count="2" />
      <LineId Id="73" Count="0" />
      <LineId Id="37" Count="2" />
      <LineId Id="46" Count="0" />
      <LineId Id="41" Count="3" />
      <LineId Id="47" Count="0" />
      <LineId Id="35" Count="1" />
      <LineId Id="74" Count="2" />
      <LineId Id="23" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="T_SubModuleCollection.TryGetModule">
      <LineId Id="46" Count="7" />
      <LineId Id="44" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>