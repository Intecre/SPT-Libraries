<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="T_ComponentsCollection" Id="{d0fd4ea2-8a96-0365-36ba-9fa85df78835}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK T_ComponentsCollection EXTENDS T_NamedBase IMPLEMENTS I_ComponentsCollection
VAR
	baseCollection : T_CollectionBase;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Private" Id="{6a576bd7-cc87-4cd5-a297-b5a6f0d46bb0}" />
    <Method Name="AddComponent" Id="{fb6c4003-1a4c-0530-3ee6-4677519bc680}">
      <Declaration><![CDATA[METHOD PUBLIC AddComponent : BOOL
VAR_INPUT
  newComponent : I_ComponentBase;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF newComponent = 0 THEN
	LogError( 'Cannot AddComponent invalid ref' );
	RETURN;
END_IF

AddComponent := baseCollection.AddItem( newItem := CastToBase(newComponent) );]]></ST>
      </Implementation>
    </Method>
    <Method Name="AllowHMIControl" Id="{a3a8d4ad-9d48-4f3f-ba31-3be39f8e4d90}">
      <Declaration><![CDATA[METHOD PUBLIC AllowHMIControl
VAR
	i : UDINT;
	Component : I_ComponentBase;
END_VAR ]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Count = 0 THEN
    RETURN;
END_IF

WHILE i < Count 
		AND_THEN TryGetComponent(i, component => Component) DO
		
    Component.AllowHMIControl();
    i := i + 1;
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Property Name="AnyError" Id="{9034e9d6-c017-4e85-8fb5-b86ce3eee340}">
      <Declaration><![CDATA[PROPERTY PUBLIC AnyError : BOOL]]></Declaration>
      <Get Name="Get" Id="{9bb5938c-c9cb-4e41-99b0-44351b5c2d05}">
        <Declaration><![CDATA[VAR
  i : UDINT;
  Component : I_ComponentBase;
END_VAR ]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF Count = 0 THEN
    RETURN;
END_IF

FOR i := 0 TO Count - 1 DO

    IF NOT TryGetComponent(i, component => Component) THEN
        RETURN;
    END_IF
		
	IF Component.Error THEN
		AnyError := TRUE;
		RETURN;
	END_IF

END_FOR

]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="BlockHMIControl" Id="{6f9e39dd-3470-4035-afab-a0932af02961}">
      <Declaration><![CDATA[METHOD PUBLIC BlockHMIControl
VAR
	i : UDINT;
	Component : I_ComponentBase;
END_VAR ]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Count = 0 THEN
    RETURN;
END_IF

WHILE i < Count 
		AND_THEN TryGetComponent(i, component => Component) DO
		
    Component.BlockHMIControl();
    i := i + 1;
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="CastToBase" Id="{fdf9b86d-2ae0-4412-bc42-f47409a0afb7}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE CastToBase : I_InterfaceBase
VAR_INPUT
	Component : I_ComponentBase;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[__QUERYINTERFACE(Component, CastToBase);]]></ST>
      </Implementation>
    </Method>
    <Method Name="CastToType" Id="{21c8e27d-e215-478b-9618-cf7e0879b0e7}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD CastToType : I_ComponentBase
VAR_INPUT
	Base : I_InterfaceBase;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[__QUERYINTERFACE(Base, CastToType);]]></ST>
      </Implementation>
    </Method>
    <Method Name="ClearGroup" Id="{54513e59-d3c1-4394-a8ab-b873a4521d91}">
      <Declaration><![CDATA[METHOD PUBLIC ClearGroup // clears the group down]]></Declaration>
      <Implementation>
        <ST><![CDATA[baseCollection.ClearGroup();]]></ST>
      </Implementation>
    </Method>
    <Property Name="Count" Id="{aae46721-b4b7-457c-ad8b-d2096729c1ff}">
      <Declaration><![CDATA[PROPERTY Count : UDINT]]></Declaration>
      <Get Name="Get" Id="{c703425a-761f-4f6d-ba1f-91d19464cde6}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Count := baseCollection.Count;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="CyclicLogic" Id="{91fecff3-afbd-4edb-b80e-debfd3f550ae}">
      <Declaration><![CDATA[METHOD CyclicLogic
VAR
  i : UDINT;
  Component : I_ComponentBase;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Count = 0 THEN
    RETURN;
END_IF

WHILE i < Count 
		AND_THEN TryGetComponent(i, component => Component) DO
		
    Component.CyclicLogic();
    i := i + 1;
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Property Name="InitialisedAll" Id="{c45efdcd-ff68-4ada-b178-9f283cfc29ff}">
      <Declaration><![CDATA[PROPERTY PUBLIC InitialisedAll : BOOL
]]></Declaration>
      <Get Name="Get" Id="{b0c84a63-02dc-419d-8b39-3ee695183c82}">
        <Declaration><![CDATA[VAR
  i : UDINT;
  Component : I_ComponentBase;
 END_VAR ]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF Count = 0 THEN
    InitialisedAll := TRUE;
    RETURN;
END_IF

WHILE i < Count 
		AND_THEN TryGetComponent(i, component => Component) DO
		
    IF NOT Component.InitComplete THEN
		RETURN;
	END_IF
	
    i := i + 1;
END_WHILE

InitialisedAll := TRUE;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Reset" Id="{a96c8941-de5e-4d1c-bfc5-4f208123d152}">
      <Declaration><![CDATA[METHOD PUBLIC Reset
VAR
	i : UDINT;
	Component : I_ComponentBase;
END_VAR 
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Count = 0 THEN
    RETURN;
END_IF

WHILE i < Count 
		AND_THEN TryGetComponent(i, component => Component) DO
		
    IF NOT Component.Error THEN
		Component.Reset();
	END_IF
	
    i := i + 1;
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetComponent" Id="{2d1e8721-47b6-026d-04e2-daccf35cf2e5}">
      <Declaration><![CDATA[METHOD TryGetComponent: BOOL
VAR_INPUT
	index : UDINT;
END_VAR
VAR_OUTPUT
	component : I_ComponentBase;
END_VAR
VAR
	baseItem : I_InterfaceBase;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[baseCollection.TryGetItem(index, item => baseItem);
component := CastToType(baseItem);

IF component = 0 THEN
	LogError( 'Cannot TryGetComponent  component = 0' );
	RETURN;
END_IF 

TryGetComponent := component <> 0;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="T_ComponentsCollection">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="T_ComponentsCollection.AddComponent">
      <LineId Id="3" Count="3" />
      <LineId Id="12" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="T_ComponentsCollection.AllowHMIControl">
      <LineId Id="71" Count="4" />
      <LineId Id="86" Count="1" />
      <LineId Id="76" Count="2" />
    </LineIds>
    <LineIds Name="T_ComponentsCollection.AnyError.Get">
      <LineId Id="35" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="12" Count="1" />
      <LineId Id="38" Count="3" />
      <LineId Id="22" Count="2" />
      <LineId Id="31" Count="0" />
      <LineId Id="25" Count="1" />
      <LineId Id="28" Count="2" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="T_ComponentsCollection.BlockHMIControl">
      <LineId Id="49" Count="2" />
      <LineId Id="72" Count="5" />
      <LineId Id="68" Count="0" />
    </LineIds>
    <LineIds Name="T_ComponentsCollection.CastToBase">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="T_ComponentsCollection.CastToType">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="T_ComponentsCollection.ClearGroup">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="T_ComponentsCollection.Count.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="T_ComponentsCollection.CyclicLogic">
      <LineId Id="45" Count="2" />
      <LineId Id="64" Count="5" />
      <LineId Id="62" Count="0" />
    </LineIds>
    <LineIds Name="T_ComponentsCollection.InitialisedAll.Get">
      <LineId Id="49" Count="3" />
      <LineId Id="75" Count="4" />
      <LineId Id="81" Count="2" />
      <LineId Id="80" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="T_ComponentsCollection.Reset">
      <LineId Id="28" Count="2" />
      <LineId Id="50" Count="4" />
      <LineId Id="59" Count="0" />
      <LineId Id="56" Count="2" />
      <LineId Id="47" Count="0" />
    </LineIds>
    <LineIds Name="T_ComponentsCollection.TryGetComponent">
      <LineId Id="29" Count="0" />
      <LineId Id="62" Count="5" />
      <LineId Id="47" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>