<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="T_ComponentsCollection" Id="{d0fd4ea2-8a96-0365-36ba-9fa85df78835}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK T_ComponentsCollection EXTENDS T_CollectionBase IMPLEMENTS I_ComponentsCollection

]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="AddComponent" Id="{fb6c4003-1a4c-0530-3ee6-4677519bc680}">
      <Declaration><![CDATA[METHOD PUBLIC AddComponent : BOOL
VAR_INPUT
  newComponent : I_ComponentBase;
END_VAR
VAR
	item : I_BaseFb;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF newComponent = 0 THEN
	LogError( 'Cannot AddComponent invalid ref' );
	RETURN;
END_IF

IF NOT __QUERYINTERFACE(newComponent, item) THEN
	LogError( 'Cannot AddComponent  NOT __QUERYINTERFACE(newComponent, item)' );
	RETURN;
END_IF

IF HasItem( item := item ) THEN
	LogWarning( 'Component already in collection.' );
	RETURN;
END_IF

AddComponent := addInSpareSlot( item := item );]]></ST>
      </Implementation>
    </Method>
    <Method Name="AllowHMIControl" Id="{a3a8d4ad-9d48-4f3f-ba31-3be39f8e4d90}">
      <Declaration><![CDATA[//! @summary Sets permissive bit to allow HMI control of component functions
METHOD PUBLIC AllowHMIControl
//! @description This method is called as required by the parent module of this component
VAR
	i : UDINT;
	Component : I_ComponentBase;
	item : I_BaseFb;
END_VAR ]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Count = 0 THEN
  RETURN;
END_IF

FOR i := 0 TO Count -1 DO

	IF NOT 	TryGetItem(i, item => item) THEN
		RETURN;
	END_IF
	
	IF NOT __QUERYINTERFACE(item, component) THEN
		RETURN;
	END_IF
		
	Component.AllowHMIControl();
		
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Property Name="AnyError" Id="{9034e9d6-c017-4e85-8fb5-b86ce3eee340}">
      <Declaration><![CDATA[PROPERTY PUBLIC AnyError : BOOL]]></Declaration>
      <Get Name="Get" Id="{9bb5938c-c9cb-4e41-99b0-44351b5c2d05}">
        <Declaration><![CDATA[VAR
  i : UDINT;
  Component : I_ComponentBase;
  item : I_BaseFb;
END_VAR ]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF Count = 0 THEN
  RETURN;
END_IF

FOR i := 0 TO Count -1 DO

	IF NOT 	TryGetItem(i, item => item) THEN
		RETURN;
	END_IF
	
	IF NOT __QUERYINTERFACE(item, component) THEN
		RETURN;
	END_IF
		
	IF Component.Error THEN
		AnyError := TRUE;
		RETURN;
	END_IF

END_FOR

]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="BlockHMIControl" Id="{6f9e39dd-3470-4035-afab-a0932af02961}">
      <Declaration><![CDATA[//! @summary Clears permissive bit to allow HMI control of component functions
METHOD PUBLIC BlockHMIControl
//! @description This method is called as required by the parent module of this component
VAR
	i : UDINT;
	Component : I_ComponentBase;
	item : I_BaseFb;
END_VAR ]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Count = 0 THEN
  RETURN;
END_IF

FOR i := 0 TO Count -1 DO

	IF NOT 	TryGetItem(i, item => item) THEN
		RETURN;
	END_IF
	
	IF NOT __QUERYINTERFACE(item, component) THEN
		RETURN;
	END_IF
		
	Component.BlockHMIControl();
		
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="ClearGroup" Id="{9c85cafe-036b-0343-3a19-4d28e743b430}">
      <Declaration><![CDATA[METHOD PUBLIC ClearGroup // clears the group down]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.ClearGroup();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CyclicLogic" Id="{91fecff3-afbd-4edb-b80e-debfd3f550ae}">
      <Declaration><![CDATA[METHOD CyclicLogic
VAR
  i : UDINT;
  Component : I_ComponentBase;
  item : I_BaseFb;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Count = 0 THEN
  RETURN;
END_IF

FOR i := 0 TO Count -1 DO
	TryGetItem(i, item => item);
	__QUERYINTERFACE(item, component);
	IF component <> 0 THEN
  		Component.CyclicLogic();
	END_IF	
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Property Name="InitialisedAll" Id="{c45efdcd-ff68-4ada-b178-9f283cfc29ff}">
      <Declaration><![CDATA[PROPERTY PUBLIC InitialisedAll : BOOL
]]></Declaration>
      <Get Name="Get" Id="{b0c84a63-02dc-419d-8b39-3ee695183c82}">
        <Declaration><![CDATA[VAR
  i : UDINT;
  Component : I_ComponentBase;
  item : I_BaseFb;
 END_VAR ]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF Count = 0 THEN
	InitialisedAll := TRUE;
  RETURN;
END_IF

FOR i := 0 TO Count -1 DO

	IF NOT 	TryGetItem(i, item => item) THEN
		RETURN;
	END_IF
	
	IF NOT __QUERYINTERFACE(item, component) THEN
		RETURN;
	END_IF
		
	IF NOT Component.InitComplete THEN
		RETURN;
	END_IF
		

END_FOR

InitialisedAll := TRUE;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Reset" Id="{a96c8941-de5e-4d1c-bfc5-4f208123d152}">
      <Declaration><![CDATA[METHOD PUBLIC Reset
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetComponent" Id="{2d1e8721-47b6-026d-04e2-daccf35cf2e5}">
      <Declaration><![CDATA[METHOD TryGetComponent: BOOL
VAR_INPUT
	index : UDINT;
END_VAR
VAR_OUTPUT
	component : I_ComponentBase;
END_VAR
VAR
	item : I_BaseFb;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT SUPER^.TryGetItem(index := index, item => item) THEN
	LogError( 'Cannot TryGetComponent NOT SUPER^.TryGetItem(index := index, item => item) ' );
	RETURN;
END_IF

IF NOT __QUERYINTERFACE(item, component) THEN
	LogError( 'Cannot TryGetComponent   NOT __QUERYINTERFACE(item, component) ' );
	RETURN;
END_IF

TryGetComponent := component <> 0;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="T_ComponentsCollection">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="T_ComponentsCollection.AddComponent">
      <LineId Id="3" Count="3" />
      <LineId Id="17" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="18" Count="1" />
      <LineId Id="7" Count="5" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="T_ComponentsCollection.AllowHMIControl">
      <LineId Id="15" Count="0" />
      <LineId Id="17" Count="13" />
      <LineId Id="33" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="14" Count="0" />
    </LineIds>
    <LineIds Name="T_ComponentsCollection.AnyError.Get">
      <LineId Id="9" Count="0" />
      <LineId Id="11" Count="13" />
      <LineId Id="31" Count="0" />
      <LineId Id="25" Count="1" />
      <LineId Id="28" Count="2" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="T_ComponentsCollection.BlockHMIControl">
      <LineId Id="14" Count="15" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="T_ComponentsCollection.ClearGroup">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="T_ComponentsCollection.CyclicLogic">
      <LineId Id="9" Count="0" />
      <LineId Id="11" Count="1" />
      <LineId Id="10" Count="0" />
      <LineId Id="4" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="T_ComponentsCollection.InitialisedAll.Get">
      <LineId Id="5" Count="21" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="T_ComponentsCollection.Reset">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="T_ComponentsCollection.TryGetComponent">
      <LineId Id="30" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="32" Count="1" />
      <LineId Id="25" Count="4" />
      <LineId Id="23" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>