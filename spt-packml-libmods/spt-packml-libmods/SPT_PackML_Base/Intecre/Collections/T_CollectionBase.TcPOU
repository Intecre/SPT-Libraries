<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="T_CollectionBase" Id="{91f145eb-820d-4f7a-9926-40255bcc85a0}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK T_CollectionBase EXTENDS T_NamedBase
VAR
    _items : ARRAY[0..(COLLECTION_MAX_SIZE-1)] OF I_InterfaceBase;
    _cnt : UDINT;
END_VAR
VAR CONSTANT
    COLLECTION_MAX_SIZE : UDINT := 200;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Private" Id="{b567f85d-3012-43a8-97ff-301076c39f5d}" />
    <Method Name="addInSpareSlot" Id="{8c3d3185-0175-4738-9c73-0037742ace98}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE addInSpareSlot : BOOL
VAR_INPUT
	Item : I_InterfaceBase;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Count >= COLLECTION_MAX_SIZE THEN
	LogError('cannot addInSpareSlot : no space.');
	RETURN;
END_IF
	
_items[Count] := Item;
Count := Count + 1;
addInSpareSlot := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddItem" Id="{694024fe-c5ed-4d58-959e-acc65fd5108c}">
      <Declaration><![CDATA[METHOD INTERNAL AddItem : BOOL
VAR_INPUT
  newItem : I_InterfaceBase;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF newItem = 0 THEN
	LogError( 'Cannot AddComponent invalid ref' );
	RETURN;
END_IF

IF HasItem( Item := newItem ) THEN
	LogWarning( 'Component already in collection.' );
	RETURN;
END_IF

AddItem := addInSpareSlot( Item := newItem );]]></ST>
      </Implementation>
    </Method>
    <Method Name="ClearGroup" Id="{33765d55-9a26-4942-8a3f-e0d7968dad36}">
      <Declaration><![CDATA[METHOD ClearGroup // clears the group down]]></Declaration>
      <Implementation>
        <ST><![CDATA[MEMSET(ADR(_items), 0 , SIZEOF(_items));
_cnt := 0;
LogDebug('ClearGroup() called.');]]></ST>
      </Implementation>
    </Method>
    <Property Name="Count" Id="{8e6ae03a-8f5c-414d-ab3f-cfcd3d9da8a8}">
      <Declaration><![CDATA[PROPERTY Count : UDINT]]></Declaration>
      <Get Name="Get" Id="{6eadc8ba-599e-4f96-a78c-8d7470a97016}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Count := _cnt;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{766f63da-f17d-49ca-a39f-c9fa2a12c25c}">
        <Declaration><![CDATA[PRIVATE]]></Declaration>
        <Implementation>
          <ST><![CDATA[_cnt := Count;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="HasItem" Id="{3ce85fba-0a5e-4fa1-9c6a-844b57d80979}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE HasItem : BOOL
VAR_INPUT
	Item : I_InterfaceBase;
END_VAR
VAR 
	i : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Count >= COLLECTION_MAX_SIZE THEN
	LogWarning('Count Exceed Collection Max Size');
	RETURN;
END_IF

FOR i := 0 TO Count DO
	
	IF _items[i] = 0 THEN
		EXIT; // exit for loop
	END_IF
	
	IF _items[i] = Item THEN
		HasItem := TRUE;
		RETURN;
		
	END_IF
	
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetItem" Id="{4079f152-eedc-41b9-985e-004de6f818fa}">
      <Declaration><![CDATA[METHOD INTERNAL TryGetItem: BOOL
VAR_INPUT
	index : UDINT;
END_VAR
VAR_OUTPUT
	item : I_InterfaceBase;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF index > (COLLECTION_MAX_SIZE-1) THEN
	LogError( 'cannot GetDrive, index out of bounds' );
	RETURN;
END_IF

IF index > Count THEN
	LogError( 'cannot GetDrive, index > (Count - 1) ' );
	RETURN;
END_IF

item := _items[index];
TryGetItem := item <> 0;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="T_CollectionBase">
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="T_CollectionBase.addInSpareSlot">
      <LineId Id="3" Count="8" />
    </LineIds>
    <LineIds Name="T_CollectionBase.AddItem">
      <LineId Id="3" Count="9" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="T_CollectionBase.ClearGroup">
      <LineId Id="11" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="T_CollectionBase.Count.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="T_CollectionBase.Count.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="T_CollectionBase.HasItem">
      <LineId Id="23" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="3" Count="11" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="T_CollectionBase.TryGetItem">
      <LineId Id="3" Count="10" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>