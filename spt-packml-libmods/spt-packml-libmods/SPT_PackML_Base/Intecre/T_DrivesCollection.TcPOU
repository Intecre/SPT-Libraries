<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="T_DrivesCollection" Id="{d0fd4ea2-8a96-0365-36ba-9fa85df78835}" SpecialFunc="None">
    <Declaration><![CDATA[// Holds a collection of drives
FUNCTION_BLOCK T_DrivesCollection EXTENDS T_MagwayNamedBase IMPLEMENTS I_DrivesCollection
VAR
	_backingStore : POINTER TO PVOID;
	_drives : POINTER TO I_Ds402 := ADR(_backingStore);// ARRAY[ 0.. TrackConstants.MaxNumCarriages - 1] OF I_Drive;
	_cnt : UINT;
	collectionMaxSize : UINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="AddDrive" Id="{fb6c4003-1a4c-0530-3ee6-4677519bc680}">
      <Declaration><![CDATA[METHOD AddDrive : BOOL
VAR_INPUT
	drive : I_Ds402;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF drive = 0 THEN
	LogError( 'Cannot AddDrive invalid ref' );
	RETURN;
END_IF

IF hasDrive( drive := drive ) THEN
	LogWarning( 'Drive already in collection.' );
	RETURN;
END_IF

AddDrive := addInSpareSlot( drive := drive );]]></ST>
      </Implementation>
    </Method>
    <Method Name="addInSpareSlot" Id="{fa90a5a6-a7d6-0fad-179b-cd65f7dfc1c1}">
      <Declaration><![CDATA[METHOD PRIVATE addInSpareSlot : BOOL
VAR_INPUT
	drive : I_Ds402;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Count >= collectionMaxSize THEN
	LogError('cannot addInSpareSlot : no space.');
	RETURN;
END_IF
	
_drives[Count] := drive;
Count := Count + 1;
addInSpareSlot := TRUE;
	
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ClearGroup" Id="{9c85cafe-036b-0343-3a19-4d28e743b430}">
      <Declaration><![CDATA[METHOD PUBLIC ClearGroup // clears the group down
VAR
	i : UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 0 TO collectionMaxSize - 1 DO
	_drives[i] := 0;
END_FOR

_cnt := 0;
LogDebug('ClearGroup() called.');]]></ST>
      </Implementation>
    </Method>
    <Property Name="Count" Id="{c3e24338-c204-0fb2-122b-2d8bd0174c7a}">
      <Declaration><![CDATA[PROPERTY Count : UINT]]></Declaration>
      <Get Name="Get" Id="{db351648-7a88-412e-902b-1ec924ca47e0}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Count := _cnt;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{5ded8cd6-0317-4cd8-a05b-26ebc2397268}">
        <Declaration><![CDATA[PRIVATE]]></Declaration>
        <Implementation>
          <ST><![CDATA[_cnt := Count;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Disable" Id="{3029c687-efdf-0804-02ce-6fe92055536d}">
      <Declaration><![CDATA[METHOD Disable : BOOL
VAR
	i: UINT;
	drv : I_DS402;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Count <= 0 THEN
	LogError('cannot Disable() as  Count <= 0');
	RETURN;
	
END_IF


FOR i := 0 TO Count - 1 DO
	drv := GetDrive(index := i);
	
	IF drv = 0 THEN
		LogError('Critical error in collection drv = 0');
		
	END_IF
	
	IF NOT drv.Disable() THEN
		LogError(' NOT drv.Disable() ');
		RETURN;
		
	END_IF
	
END_FOR

Disable := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="EnableRequest" Id="{5052b280-9392-06e6-3d95-6f1144de2e2d}">
      <Declaration><![CDATA[METHOD EnableRequest : BOOL
VAR
	i: UINT;
	drv : I_DS402;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Count <= 0 THEN
	LogError('cannot EnableRequest() as  Count <= 0');
	RETURN;
	
END_IF


FOR i := 0 TO Count - 1 DO
	drv := GetDrive(index := i);
	
	IF drv = 0 THEN
		LogError('Critical error in collection drv = 0');
		
	END_IF
	
	IF NOT drv.EnableRequest(THIS^.ObjectName) THEN
		LogError(' NOT drv.EnableRequest() ');
		RETURN;
		
	END_IF
	
END_FOR

EnableRequest := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_exit" Id="{1b669e6e-7e3c-07a1-095a-4917f16379ef}">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[__DELETE(_backingStore);
collectionMaxSize := 0;
Count := 0;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{1e66faf9-fc3f-084d-3448-ee798e76106f}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	NumberOfDrivesInCollection : UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[collectionMaxSize := NumberOfDrivesInCollection;
_backingStore := __NEW(PVOID, collectionMaxSize);
_drives := _backingStore;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetDrive" Id="{2d1e8721-47b6-026d-04e2-daccf35cf2e5}">
      <Declaration><![CDATA[// Get the drive at the specified index. check success for valid interface
METHOD GetDrive : I_Ds402
VAR_INPUT
	index : UINT;
END_VAR
VAR_OUTPUT
	success : BOOl;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF index > collectionMaxSize THEN
	LogError( 'cannot GetDrive, index out of bounds' );
	RETURN;
END_IF

IF index > (Count - 1) THEN
	LogError( 'cannot GetDrive, index > (Count - 1) ' );
	RETURN;
END_IF

GetDrive := _drives[index];
success := GetDrive <> 0;]]></ST>
      </Implementation>
    </Method>
    <Method Name="hasDrive" Id="{6a5f6459-2a32-07da-2da1-24304153ca63}">
      <Declaration><![CDATA[METHOD PRIVATE hasDrive : BOOL
VAR_INPUT
	drive : I_Ds402;
END_VAR
VAR 
	i : UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 0 TO Count - 1 DO
	
	IF _drives[i] = 0 THEN
		EXIT; // exit for loop
	END_IF
	
	IF _drives[i] = drive THEN
		hasDrive := TRUE;
		RETURN;
		
	END_IF
	
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsEnabled" Id="{26ce4ddb-f51b-0215-321e-876c552d7ce0}">
      <Declaration><![CDATA[METHOD IsEnabled : BOOL
VAR
	i: UINT;
	drv : I_Ds402;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Count <= 0 THEN
	LogError('cannot IsEnabled() as  Count <= 0');
	RETURN;
	
END_IF

FOR i := 0 TO Count - 1 DO
	drv := GetDrive(index := i);
	
	IF drv = 0 THEN
		LogError('Critical error in collection drv = 0');
		
	END_IF
	
	IF NOT drv.Enabled THEN		
		RETURN;

	END_IF
END_FOR	

IsEnabled := TRUE;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="T_DrivesCollection">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="T_DrivesCollection.AddDrive">
      <LineId Id="3" Count="9" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="T_DrivesCollection.addInSpareSlot">
      <LineId Id="3" Count="8" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="T_DrivesCollection.ClearGroup">
      <LineId Id="3" Count="4" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="T_DrivesCollection.Count.Get">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="T_DrivesCollection.Count.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="T_DrivesCollection.Disable">
      <LineId Id="3" Count="22" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="T_DrivesCollection.EnableRequest">
      <LineId Id="3" Count="22" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="T_DrivesCollection.FB_exit">
      <LineId Id="3" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="T_DrivesCollection.FB_init">
      <LineId Id="3" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="T_DrivesCollection.GetDrive">
      <LineId Id="3" Count="10" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="T_DrivesCollection.hasDrive">
      <LineId Id="3" Count="11" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="T_DrivesCollection.IsEnabled">
      <LineId Id="3" Count="19" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>